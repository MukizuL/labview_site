import { React, useState } from "react";
import "../App.css";
//import { Button } from './Button';
import "./Module2.css";
import first from "./media/images/img-1.jpg";

function Module2() {
  const questions = [
    {
      questionText: "Выберете правильный вариант ответа",
      answerOptions: [
        {
          answerText: "Case-структура может иметь только одну ветку",
          isCorrect: false,
        },
        {
          answerText:
            "В case-структуре можно использовать строковые значения для выбора ветви",
          isCorrect: true,
        },
        {
          answerText: "Внутри case-структуры нельзя создавать циклы",
          isCorrect: false,
        },
        {
          answerText:
            "Case-структуры могут быть использованы только в потоке данных",
          isCorrect: false,
        },
      ],
    },
    {
      questionText: "Выберете правильный вариант ответа",
      answerOptions: [
        {
          answerText:
            "Цикл For может быть использован только для выполнения фиксированного количества итераций.",
          isCorrect: false,
        },
        {
          answerText:
            "Цикл Do будет выполняться бесконечно, если не установлено условие выхода.",
          isCorrect: true,
        },
        {
          answerText:
            "Цикл For может быть использован только для перебора элементов массива.",
          isCorrect: false,
        },
        {
          answerText:
            "Цикл For и Цикл Do могут быть вложенными, т.е. можно помещать один цикл внутри другого.",
          isCorrect: true,
        },
      ],
    },
    {
      questionText: "Выберете правильный вариант ответа",
      answerOptions: [
        {
          answerText:
            "В LabVIEW кнопка – это элемент управления, который может быть нажат только один раз",
          isCorrect: false,
        },
        {
          answerText:
            "Кнопка может быть настроена на обработку событий нажатия и отпускания",
          isCorrect: false,
        },
        {
          answerText:
            "В LabVIEW можно создать кнопку с изображением графического объекта вместо текста",
          isCorrect: true,
        },
        {
          answerText:
            "Создание кнопки без программной обработки событий нажатия и отпускания возможно",
          isCorrect: true,
        },
      ],
    },
    {
      questionText: "Выберете правильный вариант ответа",
      answerOptions: [
        {
          answerText: "Формулы можно написать только в текстовом виде",
          isCorrect: false,
        },
        {
          answerText:
            "В редакторе формул можно автоматически построить график функции",
          isCorrect: false,
        },
        {
          answerText:
            "Редактор формул основан на математической нотации, используемой в инженерных расчетах",
          isCorrect: true,
        },
        {
          answerText:
            "Редактор формул может автоматически определять ошибки в формулах",
          isCorrect: true,
        },
      ],
    },
    {
      questionText: "Выберете не правильный вариант ответа",
      answerOptions: [
        {
          answerText:
            "Подпрограммы позволяют создавать код, который можно использовать в различных программах",
          isCorrect: false,
        },
        {
          answerText:
            "Подпрограммы создаются на основе передачи параметров и возвращения результатов",
          isCorrect: false,
        },
        {
          answerText:
            "Подпрограммы создаются с помощью блоков Function и SubVI",
          isCorrect: false,
        },
        {
          answerText:
            "Код, написанный в одной подпрограмме, не может использоваться в другой",
          isCorrect: true,
        },
      ],
    },
  ];

  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [showScore, setShowScore] = useState(false);
  const [score, setScore] = useState(0);

  const handleAnswerOptionClick = (isCorrect) => {
    if (isCorrect) {
      setScore(score + 1);
    }

    const nextQuestion = currentQuestion + 1;
    if (nextQuestion < questions.length) {
      setCurrentQuestion(nextQuestion);
    } else {
      setShowScore(true);
    }
  };
  return (
    <>
      <img src={first} alt="First" style={{ width: 400 }} />
      <div className="Module2-main-container">
        <div className="header">
          <h3>Case-структуры</h3>
        </div>

        <p>
          Case-структура – это структура программы в LabVIEW, которая позволяет
          выбирать ветвь выполнения программы в зависимости от значения сигнала,
          на входе этой структуры.
        </p>
        <p>
          На вход case-структуры поступает управляющий сигнал имеющий
          целочисленный, логический, строковый или перечислимый тип. Если
          терминал селектора имеет логический тип, то структура содержит два
          варианта: True и False. Если значение этого сигнала удовлетворяет
          одному из заданных условий (и соответствующее условие в case-структуре
          находится в активном состоянии), выполнение программы переносится в
          соответствующую ветвь. Для значений, которые не соответствуют ни
          одному из вариантов, создается вариант по умолчанию (default case).
        </p>
        <p>
          Case-структуру, например, можно использовать, чтобы реализовать выбор
          различных режимов работы программы. В таком случае, на вход структуры
          будет поступать управляющий сигнал, например, кнопка. Если кнопка
          нажата, то ветвь с активным условием будет выполнена, а если кнопка не
          нажата, то будет выполнена ветвь с неактивным условием. Структура Case
          аналогична конструкциям switch или if...then...else в текстовых языках
          программирования.
        </p>
        <p>
          Также, case-структуры могут использоваться для управления циклами,
          обработкой ошибок или выбора различных алгоритмов в зависимости от
          данных на входе.
        </p>
        <p>
          Case-структуры могут также быть вложенными, то есть внутри одной ветки
          можно разместить еще одну case-структуру. Это может быть полезно,
          например, для реализации статей машины состояний.
        </p>
        <p>
          В структуре Case можно создавать входные и выходные туннели. Входные
          значения будут доступны всем вариантам, но варианты не обязаны
          использовать каждый вход. При этом вы обязаны подать значение в
          выходной туннель в каждом из вариантов.
        </p>
        <p>
          Рассмотрим следующий пример: структура Case на блок-диаграмме содержит
          выходной туннель, но как минимум в одном из вариантов этот туннель ни
          с чем не соединен. Если выполнить этот вариант, LabVIEW не будет
          знать, какое значение подать на выход. Чтобы указать на ошибку,
          LabVIEW закрасит центр туннеля белым. При этом вариант, где
          отсутствует соединение, не обязательно будет видимым в данный момент.
        </p>

        <div className="Module2-test">
          <p>Case-структура может иметь только одну ветку</p>
          <p>
            В case-структуре можно использовать строковые значения для выбора
            ветви
          </p>
          <p>Внутри case-структуры нельзя создавать циклы</p>
          <p>Case-структуры могут быть использованы только в потоке данных</p>
        </div>

        <div className="header">
          <h3>Циклы типа For-Do</h3>
        </div>
        <p>
          Циклы типа For-Do являются одними из основных циклов в LabVIEW и
          используются для повторения операций определенное число раз. Цикл
          For-Do имеет три главных элемента, каждый из которых можно настроить:
        </p>

        <ol>
          <li>
            Счетчик – это переменная, которая увеличивается на 1 на каждой
            итерации цикла. Счетчик определяет, сколько раз цикл будет
            выполняться.
          </li>
          <li>
            Начальное значение – это значение счетчика в начале цикла. Он может
            быть любым целочисленным числом.
          </li>
          <li>
            Конечное значение – это значение, которое счетчик должен достигнуть,
            чтобы цикл остановился. Он также может быть любым целочисленным
            числом. Если конечное значение меньшеначального значения, то цикл не
            будет выполнен.
          </li>
        </ol>

        <p>
          Таким образом, в цикле For-Do программа будет выполняться определенное
          число раз, в соответствии со значениями начального и конечного
          значений счетчика. Стоит упомянуть, что кроме стандартного цикла
          For-Do в LabVIEW есть и другие типы циклов (While-Do, Repeat-Until),
          которые также позволяют повторять операции определенное число раз или
          до выполнения заданного условия. Основным применением циклов типа
          For-Do является обработка массивов, создание таблиц, заполнение
          графиков и другие задачи, использующие циклы.
        </p>

        <div className="Module2-test">
          <p>
            Цикл For может быть использован только для выполнения фиксированного
            количества итераций
          </p>
          <p>
            Цикл Do будет выполняться бесконечно, если не установлено условие
            выхода
          </p>
          <p>
            Цикл For может быть использован только для перебора элементов
            массива
          </p>
          <p>
            Цикл For и Цикл Do могут быть вложенными, т.е. можно помещать один
            цикл внутри другого
          </p>
        </div>

        <div className="header">
          <h3>Работа с "кнопками"</h3>
        </div>

        <p>
          В LabVIEW «кнопки» являются элементами управления, которые позволяют
          пользователю взаимодействовать с приложением, представленным в виде
          интерактивной графической среды.
        </p>
        <p>
          Прежде всего, для работы с кнопками необходимо разместить их на панели
          инструментов. Для этого перетащите элемент «Кнопка» из палитры
          «Элементы управления» на главную панель. Далее вам необходимо задать
          текст, который будет отображаться на кнопке. Для этого дважды кликните
          на кнопке и внесите нужный текст. Для того, чтобы при нажатии на
          кнопку выполнялся определенный код, к ней необходимо привязать
          обработчик событий, который написан на языке программирования G.
        </p>
        <ul>
          <li>Щелкните правой кнопкой мыши на кнопке.</li>
          <li>
            Выберите пункт «Создать обработчик событий» из выпадающего меню.{" "}
          </li>
          <li>
            Добавьте программный код в вновь созданный обработчик событий. В
            этом коде вы можете задать действия, которые должны выполняться при
            нажатии на кнопку.
          </li>
        </ul>
        <p>
          В качестве альтернативы, вы можете связать значок кнопки или иконку на
          блок-диаграмме со свойством «Value», который меняется, когда
          пользователь нажимает кнопку. Можно использовать кнопки как
          переключатели (они могут иметь как одно состояние, так и два или три),
          кнопки со встроенной предупредительной надписью, провереки для
          настроек и т.д.
        </p>
        <p>
          Таким образом, кнопки предоставляют в программировании LabVIEW простой
          и интуитивно понятный способ для взаимодействия пользователя с
          приложением.
        </p>

        <div className="Module2-test">
          <p>
            В LabVIEW кнопка – это элемент управления, который может быть нажат
            только один раз
          </p>
          <p>
            Кнопка может быть настроена на обработку событий нажатия и
            отпускания
          </p>
          <p>
            В LabVIEW можно создать кнопку с изображением графического объекта
            вместо текста
          </p>
          <p>
            Создание кнопки без программной обработки событий нажатия и
            отпускания возможно
          </p>
        </div>

        <div className="header">
          <h3>Редактор формул</h3>
        </div>
        <p>
          В LabVIEW «кнопки» являются элементами управления, которые позволяют
          пользователю взаимодействовать с приложением, представленным в виде
          интерактивной графической среды.{" "}
        </p>
        <p>
          Чтобы открыть редактор формул, можно кликнуть на любом числовом
          контроле или показателе, а затем выбрать пункт «Редактировать формулу»
          из выпадающего списка. Также, можно создать новый блок-диаграмму,
          выбрать из палитры инструментов «Функции» и выбрать необходимую
          функцию. Когда функция добавлена на блок диаграмму, кликните два раза
          на ней, чтобы открыть редактор формул.
        </p>
        <p>
          Редактор формул является достаточно удобным и мощным инструментом. В
          нем имеется множество математических функций, арифметических
          операторов и константных значений. Кроме того, можно создавать
          пользовательские функции и использовать их в формулах.
        </p>
        <p>
          В редакторе формул можно также использовать переменные, определенные
          на блок-диаграмме LabVIEW. Для этого на нужной фронтальной панели
          необходимо создать числовой контрол или показатель, а затем привязать
          его к переменной на блок диаграмме. После этого переменная будет
          доступна в редакторе формул. Редактор формул также предоставляет массу
          возможностей для работы с формулами. Например, в нем можно
          использовать вычисление производных и интеграл
        </p>

        <div className="Module2-test">
          <p>Формулы можно написать только в текстовом виде</p>
          <p>В редакторе формул можно автоматически построить график функции</p>
          <p>
            Редактор формул основан на математической нотации, используемой в
            инженерных расчетах
          </p>
          <p>
            Редактор формул может автоматически определять ошибки в формулах
          </p>
        </div>

        <div className="header">
          <h3>Подпрограммы</h3>
        </div>

        <p>
          В LabVIEW есть функциональность, позволяющая создавать подпрограммы,
          то есть участки кода, которые можно переиспользовать в разных
          программах. Для этого создаются VI (Virtual Instruments) –
          функциональные блоки, которые могут принимать входные параметры,
          обрабатывать их и выдавать результат.
        </p>
        <p>
          Особенностью подпрограмм LabVIEW является то, что они могут
          функционировать как независимые автономные приложения, так и быть
          частью основной программы.{" "}
        </p>
        <p>
          Чтобы использовать подпрограмму в другом приложении в LabVIEW,
          необходимо сначала создать ее в отдельном VI. Затем в приложении, где
          нужно использовать эту подпрограмму, можно вызвать ее как подфункцию,
          используя функцию Call By Reference. Для этого нужно создать ссылку на
          VI, который реализует подпрограмму, и передать эту ссылку в функцию
          Call By Reference. Затем можно передавать необходимые параметры в
          созданный VI и получать результат.
        </p>
        <p>
          Использование подпрограмм позволяет сократить время разработки
          приложений и повысить их надежность и читаемость. Также это позволяет
          достичь модульности кода и обеспечить его повторное использование в
          будущих проектах.
        </p>

        <div className="Module2-test">
          <p>
            Подпрограммы позволяют создавать код, который можно использовать в
            различных программах
          </p>
          <p>
            Подпрограммы создаются на основе передачи параметров и возвращения
            результатов
          </p>
          <p>Подпрограммы создаются с помощью блоков Function и SubVI</p>
          <p>
            Код, написанный в одной подпрограмме, не может использоваться в
            другой
          </p>
        </div>
        <div className="app">
          {showScore ? (
            <div className="score-section">
              You scored {score} out of {questions.length}
            </div>
          ) : (
            <>
              <div className="question-section">
                <div className="question-count">
                  <span>Question {currentQuestion + 1}</span>/{questions.length}
                </div>
                <div className="question-text">
                  {questions[currentQuestion].questionText}
                </div>
              </div>
              <div className="answer-section">
                {questions[currentQuestion].answerOptions.map(
                  (answerOption) => (
                    <button
                      onClick={() =>
                        handleAnswerOptionClick(answerOption.isCorrect)
                      }
                    >
                      {answerOption.answerText}
                    </button>
                  )
                )}
              </div>
            </>
          )}
        </div>
      </div>
    </>
  );
}

export default Module2;
